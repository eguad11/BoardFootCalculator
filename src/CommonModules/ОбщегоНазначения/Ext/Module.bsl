#Область Параметры_Сеанса

// Устанавливает тип мобильного устройства.
//
Процедура УстановитьТипМобильногоУстройства() Экспорт
	
	ТипМобильногоУстройства = Перечисления.ТипыМобильныхУстройств.Планшет;
	
	#Если МобильноеПриложениеСервер Тогда
		ИнформацияЭкрана = ПолучитьИнформациюЭкрановКлиента();
		DPI		= ИнформацияЭкрана[0].DPI;
		Высота	= ИнформацияЭкрана[0].Высота;
		Ширина	= ИнформацияЭкрана[0].Ширина;
		РазмерЭкрана = Sqrt((Высота/DPI*Высота/DPI)+(Ширина/DPI*Ширина/DPI));
		// Порог планшета зависит от DPI
		// Samasung Galaxy Tab S2 DPI = 320, РазмерЭкрана = 7.85
		// iPAD DPI = 264, РазмерЭкрана = 9.7
		// iPAD 4 mini DPI = 326, РазмерЭкрана = 7.8
		Если DPI > 310 Тогда
			ПорогПланшета = 7.85;
		Иначе
			ПорогПланшета = 9;
		КонецЕсли;
		ПорогПлафона = 4.9;
		Если РазмерЭкрана < ПорогПланшета Тогда
			Если РазмерЭкрана < ПорогПлафона Тогда
				ТипМобильногоУстройства = Перечисления.ТипыМобильныхУстройств.Смартфон;
			Иначе
				ТипМобильногоУстройства = Перечисления.ТипыМобильныхУстройств.Плафон;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
	ТекущийТипМобильногоУстройства = Константы.ТипМобильногоУстройства.Получить();
	Если НЕ ТекущийТипМобильногоУстройства = ТипМобильногоУстройства Тогда
		Константы.ТипМобильногоУстройства.Установить(ТипМобильногоУстройства);
	КонецЕсли;
	
КонецПроцедуры // УстановитьТипМобильногоУстройства

#КонецОбласти

#Область Сохраняемые_Настройки

// Сохраняет значение реквизита объекта.
//
// Параметры:
//  Владелец		- Строка - Строковое представление объекта владельца параметра.
//	Ключ			- Строка - Ключ сохраняемых значений.
//  Данные			- Произвольный - Значение сохраняемого реквизита
//
Процедура СохранитьНастройку(Владелец, Ключ, Данные) Экспорт

	СохраняемыеНастройки = РегистрыСведений.СохраняемыеНастройки.СоздатьМенеджерЗаписи();
	
	СохраняемыеНастройки.Владелец = Владелец;
	СохраняемыеНастройки.Прочитать();
	
	Если Данные = Неопределено Тогда
	
		СохраняемыеНастройки.Удалить();
		
	Иначе
		
		Если СохраняемыеНастройки.Выбран() Тогда
			// Настройка уже есть в регистре
			СтруктураДанных = СохраняемыеНастройки.ЗначенияНастроек.Получить();
			
			// Проверка корректности типа
			Если НЕ ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда
				СтруктураДанных = Новый Структура();
			КонецЕсли;
			
			// Обновление значения
			СтруктураДанных.Вставить(Ключ, Данные);
		Иначе
			// Создание новой настройки
			СохраняемыеНастройки.Владелец = Владелец;
			СтруктураДанных = Новый Структура(Ключ, Данные);
		КонецЕсли; 
		
		// Подготовка и запись данных в регистр
		ЗначениеДанных = Новый ХранилищеЗначения(СтруктураДанных, Новый СжатиеДанных(6));
		СохраняемыеНастройки.ЗначенияНастроек = ЗначениеДанных;
		СохраняемыеНастройки.Записать();
	
	КонецЕсли; 

КонецПроцедуры // СохранитьНастройку()
 

// Возвращает сохраняемые реквизиты объекта.
//
// Параметры:
//  Владелец		- Строка - Строковое представление объекта владельца параметра.
//
// Возвращаемое значение:
//   Структура   	- Структура сохраняемых реквизитов объекта. Ключ - имя реквизита, Значение - значение реквизита.
//
Функция СохраняемыеЗначения(Владелец) Экспорт

	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СохраняемыеНастройки.ЗначенияНастроек КАК ЗначенияНастроек
	               |ИЗ
	               |	РегистрСведений.СохраняемыеНастройки КАК СохраняемыеНастройки
	               |ГДЕ
	               |	СохраняемыеНастройки.Владелец = &Владелец";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("Владелец", Владелец);
	
	Данные = Новый Структура;
	
	// Выборка данных из регистра
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
	
		Настройки = Рез.ЗначенияНастроек.Получить();
		
		Если НЕ Настройки = Неопределено Тогда
			// Формирование структуры настроек
			Для каждого СтрокаНастроек Из Настройки Цикл
			
				Данные.Вставить(СтрокаНастроек.Ключ, СтрокаНастроек.Значение);
			
			КонецЦикла; 
		КонецЕсли;
	
	КонецЕсли; 
	
	Возврат Данные;

КонецФункции // СохраняемыеЗначения()

#КонецОбласти
